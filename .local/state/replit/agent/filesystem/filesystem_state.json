{"file_contents":{"README.md":{"content":"# workspace\n\nA new Flutter project.\n\n## Getting Started\n\nThis project is a starting point for a Flutter application.\n\nA few resources to get you started if this is your first Flutter project:\n\n- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)\n- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)\n\nFor help getting started with Flutter development, view the\n[online documentation](https://docs.flutter.dev/), which offers tutorials,\nsamples, guidance on mobile development, and a full API reference.\n","size_bytes":552},"analysis_options.yaml":{"content":"# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at https://dart.dev/lints.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options\n","size_bytes":1420},"build.yaml":{"content":"targets:\n  $default:\n    builders:\n      isar_generator:\n        options:\n          compactIds: true","size_bytes":100},"pubspec.yaml":{"content":"name: novelist_plus\ndescription: A Flutter app for novelists with AI assistance and MCP integration\npublish_to: 'none'\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=3.1.0 <4.0.0'\n  flutter: \">=3.13.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  \n  # State Management\n  flutter_riverpod: ^2.4.9\n  riverpod_annotation: ^2.3.3\n  \n  # Database\n  isar: ^3.1.0+1\n  isar_flutter_libs: ^3.1.0+1\n  path_provider: ^2.1.1\n  \n  # Networking & HTTP\n  dio: ^5.3.4\n  shelf: ^1.4.1\n  shelf_router: ^1.1.4\n  shelf_cors_headers: ^0.1.5\n  \n  # UI Components\n  cupertino_icons: ^1.0.6\n  flutter_staggered_grid_view: ^0.7.0\n  flutter_animate: ^4.3.0\n  \n  # Text Processing\n  markdown: ^7.1.1\n  yaml: ^3.1.2\n  \n  # File & Image Handling\n  file_picker: ^6.1.1\n  image_picker: ^1.0.4\n  path: ^1.8.3\n  \n  # Search\n  fuse: ^0.0.99\n  \n  # Routing\n  go_router: ^12.1.3\n  \n  # Utilities\n  uuid: ^4.2.1\n  intl: ^0.19.0\n  rxdart: ^0.27.7\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^3.0.0\n  \n  # Code Generation\n  build_runner: ^2.4.7\n  isar_generator: ^3.1.0+1\n  riverpod_generator: ^2.3.9\n  json_annotation: ^4.8.1\n  json_serializable: ^6.7.1\n\nflutter:\n  uses-material-design: true\n  assets:\n    - assets/templates/\n    - assets/demo/","size_bytes":1226},"android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java":{"content":"package io.flutter.plugins;\n\nimport androidx.annotation.Keep;\nimport androidx.annotation.NonNull;\nimport io.flutter.Log;\n\nimport io.flutter.embedding.engine.FlutterEngine;\n\n/**\n * Generated file. Do not edit.\n * This file is generated by the Flutter tool based on the\n * plugins that support the Android platform.\n */\n@Keep\npublic final class GeneratedPluginRegistrant {\n  private static final String TAG = \"GeneratedPluginRegistrant\";\n  public static void registerWith(@NonNull FlutterEngine flutterEngine) {\n    try {\n      flutterEngine.getPlugins().add(new com.mr.flutter.plugin.filepicker.FilePickerPlugin());\n    } catch (Exception e) {\n      Log.e(TAG, \"Error registering plugin file_picker, com.mr.flutter.plugin.filepicker.FilePickerPlugin\", e);\n    }\n    try {\n      flutterEngine.getPlugins().add(new io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin());\n    } catch (Exception e) {\n      Log.e(TAG, \"Error registering plugin flutter_plugin_android_lifecycle, io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin\", e);\n    }\n    try {\n      flutterEngine.getPlugins().add(new io.flutter.plugins.imagepicker.ImagePickerPlugin());\n    } catch (Exception e) {\n      Log.e(TAG, \"Error registering plugin image_picker_android, io.flutter.plugins.imagepicker.ImagePickerPlugin\", e);\n    }\n    try {\n      flutterEngine.getPlugins().add(new dev.isar.isar_flutter_libs.IsarFlutterLibsPlugin());\n    } catch (Exception e) {\n      Log.e(TAG, \"Error registering plugin isar_flutter_libs, dev.isar.isar_flutter_libs.IsarFlutterLibsPlugin\", e);\n    }\n    try {\n      flutterEngine.getPlugins().add(new io.flutter.plugins.pathprovider.PathProviderPlugin());\n    } catch (Exception e) {\n      Log.e(TAG, \"Error registering plugin path_provider_android, io.flutter.plugins.pathprovider.PathProviderPlugin\", e);\n    }\n  }\n}\n","size_bytes":1879}},"version":1}